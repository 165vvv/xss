🛡️ 跨站脚本攻击 (XSS)
介绍
跨站脚本攻击 (XSS) 是一种安全漏洞，攻击者可以将恶意脚本注入到网站中，然后由其他用户的浏览器执行。这可能导致各种恶意活动，例如窃取 cookies、将用户重定向到钓鱼网站或篡改网站内容。

关于 XSS 的误解
许多人错误地认为 XSS 仅限于 JavaScript。然而，XSS 可以发生在网站使用的任何脚本语言中，包括较旧的技术如 Flash。

XSS 的工作原理
当开发人员未能在网页上显示用户输入之前正确清理输入时，就会出现 XSS 漏洞。这使得攻击者能够将任意 HTML 或 JavaScript 代码注入到页面中，然后由受害者的浏览器执行。

示例场景
如果一个网站接受用户输入（例如，一个名字）并在页面上显示而不进行清理，攻击者可以输入一个包含恶意 JavaScript 代码的 <script> 标签。当页面加载时，攻击者的脚本将在受害者的浏览器中执行。

跨站脚本的类型
XSS 有几种类型，包括：

持久型跨站脚本 (Stored XSS)：攻击者将恶意代码注入到网站的数据库或文件系统中。当其他用户访问受影响的页面时，这段代码会被显示出来。
反射型跨站脚本 (Reflected XSS)：攻击者向受害者发送一个恶意链接。当受害者点击该链接时，攻击者的脚本会被执行。反射型 XSS 不涉及在服务器上存储恶意代码。
DOM 型跨站脚本 (DOM XSS)：漏洞存在于客户端的 JavaScript 代码中。攻击者操纵文档对象模型 (DOM) 来注入恶意代码。DOM 接收器 (DOM sinks) 用于将源代码中的值引入 DOM，例如通过 document.write 或 jQuery 函数。
盲打跨站脚本 (Blind XSS)：一种持久型 XSS，攻击者无法立即看到其注入代码的结果。有效载荷在应用程序的不同部分执行，通常是在管理界面中。
缓解型跨站脚本 (Mitigation XSS)：指用于防止或减少 XSS 漏洞影响的技术。
本学习指南将主要关注 源反射型跨站脚本 (source reflected XSS) 和 源存储型跨站脚本 (source stored XSS)，这两种是最基本的类型。

反射型 XSS 演示
考虑一个用 PHP 编写的简单 HTML 页面，要求用户输入并在 URL 中反射该输入。

html
Copy
<p>名字: [用户输入]</p>
通常，用户会输入他们的名字，例如“John”，并在 URL 中反射出来。然而，攻击者可以输入 JavaScript 代码。

注入 JavaScript
攻击者可以在用户输入字段中输入以下代码：

html
Copy
<script>alert("XSS")</script>
如果网站未清理用户输入，这段代码将被执行，并弹出一个警告框。

清理用户输入
防御 XSS 的基本方法是从用户输入中移除 <script> 标签。例如，如果用户输入 <script>alert("XSS")</script>，网站可以移除 <script> 标签，只留下 alert("XSS")。

然而，这种防御并不万无一失。攻击者可以使用其他 HTML 标签和事件处理程序来执行 JavaScript 代码。

使用 HTML 标签和事件处理程序
攻击者可以使用一个源损坏的 <img> 标签和一个 onerror 事件处理程序来执行 JavaScript 代码。

html
Copy
<img src="x" onerror="alert('XSS')">
在这种情况下，当图像加载失败时，onerror 事件处理程序将被触发，alert() 函数将被执行。

事件处理程序
事件处理程序是当特定事件发生时执行的 JavaScript 函数，例如图像加载或页面卸载。常见的事件处理程序包括 onload 和 onerror。

窃取 Cookies
XSS 可以用来窃取用户的 cookies，这些 cookies 可以用来冒充用户并访问他们的账户。

示例
攻击者可以使用以下 JavaScript 代码来窃取用户的 cookies：

html
Copy
<script>alert(document.cookie)</script>
这段代码将显示一个包含用户 cookies 的警告框。攻击者可以将这些 cookies 发送到他们自己的服务器，并用它们登录受害者的账户。

会话 Cookies
会话 cookies 用于在用户登录网站后识别用户。如果攻击者窃取了用户的会话 cookie，他们可以在不知道密码的情况下以用户身份登录。

现实世界的影响
如果攻击者窃取了银行网站用户的会话 cookie，他们可能会获得用户的银行账户详细信息，并可能将钱转出账户。

🛡️ 跨站脚本 (XSS) 攻击
跨站脚本 (XSS) 是一种危险的攻击，攻击者将恶意脚本注入到网站中。

反射型跨站脚本
一种基本的攻击向量，攻击者将代码插入到一个字段中，该输入在 HTML 源代码中被反射。攻击者可以向受害者发送一个包含恶意脚本的 URL。如果受害者点击该链接，攻击者可以窃取他们的 cookie。

示例
攻击者向用户发送一个带有 XSS 有效载荷的 URL。

如果用户打开该 URL，攻击者可以窃取用户的 cookie。

转义 HTML 注释
用户输入可能在 HTML 注释中被反射。HTML 注释以 <!-- 开始，以 --> 结束。攻击者可以通过以 --> 结束注释来跳出注释。

示例
网站在 HTML 注释中反射用户输入：<!-- 用户输入 -->
攻击者注入 --> <script>alert('XSS')</script> <!--。
结果 HTML 变为 <!-- --> <script>alert('XSS')</script> <!-- -->，允许脚本执行。
输入字段利用
用户输入可能在输入字段中被反射。### 示例

网站在输入字段中反映用户输入：<input value="用户输入">
攻击者注入 " onfocus="alert('XSS')".
生成的 HTML 变为 <input value="" onfocus="alert('XSS')"" >，允许脚本在输入字段获得焦点时执行。
单引号与双引号
攻击者必须使用正确类型的引号（单引号或双引号）来正确地跳出输入标签。开发者可能会过滤双引号，但不一定过滤单引号，这使得攻击者可以使用单引号绕过过滤。

概念验证
alert() 函数通常用作 XSS 漏洞的简单概念验证。然而，攻击者可以执行更恶意的操作。

alert() 的替代
使用 prompt() 而不是 alert() 进行测试，因为开发者通常会过滤 alert()。

偷取 Cookies
攻击者可以使用 JavaScript 偷取 Cookies 并将其发送到他们的服务器。

步骤
使用 JavaScript 访问文档的 Cookies。
将 Cookies 转换为 URL 参数。
向攻击者的 Web 服务器发送请求，将 Cookie 作为参数。
攻击者可以在其服务器的访问日志中找到 Cookie。
跨站脚本保护
内容安全策略 (CSP)
CSP 是从服务器发送到浏览器的一个头部，限制浏览器可以加载资源的来源。CSP 可以防止未经授权的 JavaScript 执行。

X-XSS-Protection 头部
一个较旧的头部，提供了一些 XSS 保护。由于 CSP 头部的存在，它在很大程度上变得无关紧要，但旧版浏览器可能只支持此头部。有时可能会被利用。

XSS 的影响
攻击者可以：

偷取 Cookies
插入键盘记录器
执行任意 JavaScript 函数
删除账户
安装加密货币挖矿程序
HTTPOnly 标志
HttpOnly 标志防止 JavaScript 读取 Cookie。如果启用此标志，攻击者无法使用 JavaScript 偷取 Cookie。

存储型跨站脚本
攻击者将恶意脚本注入到网站的数据库中。当其他用户查看内容时，脚本在他们的浏览器中执行。

示例
攻击者将恶意脚本注入到论坛帖子中。当其他用户查看该帖子时，脚本在他们的浏览器中执行。

如何注入代码
攻击者可以通过以下方式注入代码：

在论坛或社交媒体网站上发帖。
通过 Web 表单提交数据。
任何其他允许用户输入被存储并在网站上显示的方法。
跨站脚本 (XSS)
存储型跨站脚本
如果你看到 Facebook 帖子或访问某个网站，与该内容相关的代码可以在你的计算机上执行。一个例子是自我转发的推文，其中在后台执行的代码导致每个偶然发现它的人都转发了它。

在存储型跨站脚本中，当你在 Twitter 或 Facebook 等平台上发布代码时，它会存储在他们的服务器上。当客户端访问该页面并加载帖子时，他们可能会看到恶意代码（如鼠标代码），而不是预期的内容（如猫的图片），这会执行意外的操作。

易受攻击的网站示例：hackxpert.com/ratsite
网站 hackxpert.com/ratsite 被故意设计为易受攻击。它允许用户注册、登录，甚至使自己成为管理员。

访问该网站的联系人页面可能会触发跨站脚本。即使不编写任何代码，简单地打开页面也可能导致注入脚本的执行。攻击者可能会插入幽默或恶意内容作为跨站脚本有效载荷的一部分。

现实世界的考虑
在现实场景中，攻击者通常追求隐蔽，而不是显示明显的警报。他们可能会执行代码以偷取 Cookies 或用恶意内容替换图像（例如，将猫的图片替换为老鼠）。

反射型跨站脚本
反射型跨站脚本涉及攻击者向受害者发送恶意链接，通常通过社会工程学。当受害者点击链接时，代码执行。

例如，如果 URL 包含一个参数如 search term，攻击者可以制作一个恶意链接并发送给用户。当用户点击链接时，注入的代码执行。

比较：存储型与反射型 XSS
特征	存储型 XSS	反射型 XSS
严重性	通常更严重	较轻（需要社会工程学）
攻击向量	浏览网站	点击恶意链接
用户交互	注入后无需直接交互	需要用户点击链接
上下文和 AngularJS 漏洞
代码可以在各种上下文中执行。开发者可能会实施安全措施以过滤潜在的攻击向量，但漏洞仍然可能存在。

AngularJS 是一个 JavaScript 模板引擎，如果使用过时的版本，可能会引入漏洞。在易受攻击的版本中，可能会发生客户端模板注入。

示例：模板注入
如果你在易受攻击的 AngularJS 模板中输入 $ seven times seven$，它会被转换为 
KaTeX can only parse string typed expression
49 并执行。即使开发者实施了其他安全措施，攻击者仍然可以插入恶意代码。

勤奋的重要性
解决跨站脚本问题需要在整个应用程序中保持勤奋。这不是一个可以通过几个简单步骤解决的问题。

确保开发者接受适当的安全实践培训至关重要。使用模板引擎需要深入的知识，以避免引入漏洞。

跨站脚本课程
一门全面的 Udemy 课程涵盖与跨站脚本相关的不同攻击类型和上下文。该课程旨在使参与者熟练掌握使用被动和主动方法寻找跨站脚本漏洞的技能。

被动方法： 一种懒惰的测试方式，发现的漏洞较少。
主动方法： 一种更为复杂的方法，覆盖的范围较小，但仍能发现更多漏洞。
DOM（文档对象模型）跨站脚本
DOM 跨站脚本涉及操纵 DOM（文档对象模型）以注入恶意代码。

示例：URL 参数注入
一个简单的例子是获取 URL 的一部分（例如，default=value）并使用 JavaScript 将其插入到页面上。

html
Copy
<script>
document.write(document.location.href);
</script>
如果 URL 是 example.com?default=1，脚本将在页面上反映 "1"。

JavaScript 作为金矿
JavaScript 代码是发现漏洞的宝贵资源。仔细审查 JavaScript 代码可以揭示潜在的攻击向量。

DOM Sink 和 Source
DOM sink 是可以用于将代码注入到 DOM 中的函数。示例包括：

document.write
document.writeln
document.domain
innerHTML
outerHTML
攻击者可以利用这些 sink 插入恶意代码并利用跨站脚本漏洞。

DOM 与基于源的 XSS
基于源的 XSS： 涉及直接在源代码中显示注入的代码。
基于 DOM 的 XSS： 涉及操纵 DOM 以注入代码。
检测的难度
DOM 跨站脚本通常比基于源的 XSS 更难检测。建议使用扫描器来识别这些类型的漏洞。

PortSwigger 有一篇出色的文章详细介绍了可能导致基于 DOM 的跨站脚本的各种 DOM sink。

jQuery 和 DOM Sink
jQuery 是一个 JavaScript 库，提供了额外的 DOM sink，可能会受到 DOM 跨站脚本的影响。

JavaScript 的普遍性和机会
JavaScript 在现代网站中被广泛使用，创造了许多发现漏洞的机会。

像 jQuery、Ajax 和 TypeScript 这样的技术都是 JavaScript 的类型或扩展。Ajax 使得无需刷新页面即可进行实时更新，例如在线拍卖。

安全隐患
开发者可能并不总是理解其代码的安全隐患。即使经过彻底的输入过滤，单个易受攻击的参数也可能被利用。

🛡️ 跨站脚本与安全实践

xss漏洞验证0，本实验提前租用了云服务器获取公网IP
启动服务

方式一：手动命令运行
cd / xss
nohup python3 -m http.server 8081 --bind 0.0.0.0 > server.log 2>&1 &
  8081：监听的端口
  --bind 0.0.0.0：监听所有 IP（包括公网）
  nohup + &：后台运行并输出日志到 server.log

方式二：使用启动脚本（可选）
可以新建一个脚本文件 run_xss.sh在/xss目录下 ：
#!/bin/bash
cd /xss
nohup python3 -m http.server 8081 --bind 0.0.0.0 > server.log 2>&1 &
echo "已启动服务，访问地址：http://（公网IP地址）/xss.（地址后缀）"
然后赋予执行权限并运行：
chmod +x run_xss.sh
./run_xss.sh

四、访问页面
在浏览器中访问： 
http:// （公网IP地址）/xss.（地址后缀）

五、HTML 页面功能说明（xss.html）
页面功能包含：
1️.反射型 XSS 测试
 输入关键词，点击“搜索”
 参数通过 URL 查询参数传递，如：
http:// （公网IP地址）/xss.（地址后缀）?q=<script>alert('XSS')</script>
 页面会直接将参数插入到 DOM 中，触发脚本

2️存储型 XSS 测试
 留言内容输入框中输入 XSS Payload，例如：
<img src=x onerror=alert('XSS')>
  点击“添加留言”
  留言被保存到浏览器 localStorage，下次刷新页面仍会加载
  点击“编辑”或“删除”可管理留言内容
  添加后自动刷新页面，触发 XSS
